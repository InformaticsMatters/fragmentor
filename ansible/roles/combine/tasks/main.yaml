---

# Graph combination process.
#
# Given one or more vendor or combination extracts this process creates a new Neo4j combination
# (a de-duplicated combination of the various node and edge files)
#
# The playbook: -
#
# - Downloads the individual or combined datasets
# - Then depending on the file, processing will:
# - - De-duplicate files that contain data where no merging is necessary.
# - - Merges files that contain data that must be de-duplicated and combined.
# - - Concatenates files that contain non-duplicate data.
# - Processes combined de-duplicated build.
# - Uploads the result as a new combination to S3
#
# Check that required command line parameters have been set:
# - deployment
# - Parameter file file containing the libraries has been created.
#
#  e.g.
#buckets:
#     - s3-1:
#        bucket: <bucket-name on s3>
#        aws_access_key: '<access-key>'
#        aws_secret_key: '<secret-key>'
#
#extracts:
#    - lib:
#        path: 'xchem_dsip'
#        data_source: disk
#    - lib:
#        path: 'xchem_spot'
#        data_source: s3
#        bucket: s3-1
#
## The name parameter defines the subdirector in "combinations" that will be used for the output.
#output_name: 'xchem_combi_20200715'
#output_data_source: disk
#output_bucket: s3-1
#
#   ansible-playbook site-combine \
#     -e @parameters \
#     -e deployment=development|production
#

- name: Assert user-variable definitions
  assert:
    that:
    - deployment|string|length > 0
    - deployment|string != 'SetMe'
    - "{{ combine[0].lib.path|string != 'SetMe'}}"
    - "{{ combine[0].lib.data_source|string != 'SetMe'}}"
    - "{{ data_source_out|string != 'SetMe'}}"
    - runpath|string|length > 0
    - runpath|string != 'SetMe'
    fail_msg: You must provide a 'deployment', a list of extracts in a parameter file to combine and an output location.

- name: Assert sort memory
  assert:
    that:
    - nextflow_process_sort_memory_m|int >= 100

- name: List input datasets
  debug:
    msg: "{{ item.lib }}"
  loop: "{{ combine }}"

- import_tasks: initialise.yaml

#- include_tasks: "{{ role_path }}/../utils/tasks/send-mail.yaml"
#  vars:
#    mail_subject: >-
#      Play no. {{ cylc_play_number }} -
#      COLLECTING (1/4) - combination {{ combination_number }}

- import_tasks: download-datasets.yaml
- import_tasks: deduplicate.yaml
- import_tasks: merge.yaml
- import_tasks: concatenate.yaml

- name: Display compress_tasks
  debug:
    var: compress_tasks

- name: Check compress tasks finished.
  async_status: jid={{ compress_result.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: "{{ (compress_timeout_minutes|int /
            compress_poll_period_minutes|int )|int }}"
  delay: "{{ compress_poll_period_minutes|int * 60 }}"
  loop: "{{ compress_tasks }}"
  loop_control:
    loop_var: compress_result

# Finalise report
- name: Write line to report
  blockinfile:
    marker: "<!-- {combination-init} ANSIBLE MANAGED BLOCK -->"
    path: "{{ log_path }}/combination_report.html"
    block: |
      <p>Combine play ended on: {{ now(utc=True).isoformat() }}</p>

- include_tasks: finalise-{{ data_source_out }}.yaml

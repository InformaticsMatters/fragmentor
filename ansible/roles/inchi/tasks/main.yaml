---

# Check that a version has been defined.
# the most convenient way of doing this is via the command-line: -
#
#   ansible-playbook site-inchi \
#     -e vendor=dsip
#     -e version=123

- name: Assert user-variable definitions
  assert:
    that:
    - deployment|string|length > 0
    - deployment|string != 'SetMe'
    fail_msg: You must provide a 'deployment' to update inchi data.


- name: Erase inchi paths
  file:
    path: "{{ item }}"
    state: absent
  loop:
  - "{{ fragpath }}/inchi"
  - "{{ fragpath }}/isoinchi"
  when: clean_start|bool

- name: Create inchi paths
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ fragpath }}/inchi"
  - "{{ fragpath }}/isoinchi"

- name: Ensure sql, nextflow and inchi directories are present
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ reppath }}/sql"
  - "{{ reppath }}/nextflow"

- block:
  - import_tasks: gen-nonisomol-inchi-database.yaml
  - import_tasks: load-nonisomol-inchi.yaml
  - import_tasks: gen-isomol-inchi-database.yaml
  - import_tasks: load-isomol-inchi.yaml

  module_defaults:
    postgresql_query:
      login_host: "{{ database[deployment].login_host }}"
      port: "{{ database[deployment].port }}"
      db: "{{ database[deployment].db }}"
      login_user: "{{ database[deployment].login_user }}"
      login_password: "{{ database[deployment].login_password }}"
    postgresql_copy:
      login_host: "{{ database[deployment].login_host }}"
      port: "{{ database[deployment].port }}"
      db: "{{ database[deployment].db }}"
      login_user: "{{ database[deployment].login_user }}"
      login_password: "{{ database[deployment].login_password }}"

---

#   Extract new isomol smiles and generate inchis.
#   Note that isomol inchis should be copied down as CSV so that backslash characters are preserved.
#   Combinations such as \n, \N and \C are valid in isomol smiles.
#

- name: Extract isomol smiles with missing inchi information to isoinchfile
  command: >-
    psql -X -U {{ database[deployment].login_user }} -h {{ database_login_host }} --echo-all
     --set AUTOCOMMIT=off --set ON_ERROR_STOP=on
     -c "\COPY (SELECT iso.smiles FROM isomol iso
                 WHERE iso.inchis IS NULL)
                    TO '{{ fragpath }}/isoinchi/{{ isoinchifile }}' (FORMAT csv);"
    {{ database[deployment].db }}
  environment:
    PGPASSWORD: "{{ database[deployment].login_password }}"

- name: Calculate how many smiles to generate inchi for
  command: >-
      wc -l {{ fragpath }}/isoinchi/{{ isoinchifile }}
  register: wc_result

- name: Set Inchis to Process
  set_fact:
    inchis_to_process: "{{ wc_result.stdout.split(' ')[0]|int }}"

- debug:
    var: inchis_to_process

- name: Variable sanity-check
  assert:
    that:
    - inchis_to_process|int > 0

- name: Set inchigenchunk_calc
  set_fact:
    inchigenchunk_calc: "{{ (0.5 * inchis_to_process|int/hardware[deployment].parallel_jobs)|int }}"

# Check this is greater than the minimum
- name: Set inchigenchunk
  set_fact:
    inchigenchunk: "{{ inchigenchunk_calc|int }}"
  when: inchigenchunk_calc|int>inchigenchunk|int

- debug:
    var: inchigenchunk

- name: Variable sanity-check
  assert:
    that:
    - inchigenchunk|int > 0

# Set nextflow_timeout_minutes based on the expected input file(s), speed of python script and number of CPUS.
# If this is development or the value is lower than the default then the default is used.
- name: Set nextflow_timeout_calc
  set_fact:
    nextflow_timeout_calc: "{{ (safety_factor * inchigenchunk|int/(inchi_mols_minute * hardware[deployment].parallel_jobs))|int }}"
  when: deployment=="production"

- name: Set nextflow_timeout_minutes
  set_fact:
    nextflow_timeout_minutes: "{{ nextflow_timeout_calc|int }}"
  when: nextflow_timeout_calc|int>nextflow_timeout_minutes

# Set nextflow_poll_period_minutes based on nextflow_timeout_minutes.
# We'll poll for execution completion 100 times over the total timeout period.
# This should be responsive without resulting in too many lines in the Ansible log.
# If this is development then this defaults.
- name: Set nextflow_poll_period_minutes
  set_fact:
    nextflow_poll_period_minutes: "{{ (nextflow_timeout_minutes | int / 100) | int }}"
  when: deployment=="production"

- name: Ensure nextflow_poll_period_minutes is not zero
  set_fact:
    nextflow_poll_period_minutes: 1
  when: nextflow_poll_period_minutes | int == 0

# Move the nextflow workflow and config into place (from templates)
# so they move from "<templates>/{{ deployment }}" to "{{ reppath }}/nextflow"...

- name: Translate nextflow files
  template:
    src: "{{ item }}"
    dest: "{{ reppath }}/nextflow/{{ item|regex_replace(deployment + '/')|regex_replace('.j2') }}"
  loop:
  - "generateinchi.nf.j2"
  - "{{ deployment }}/nextflow.config.j2"

#
# python -m frag.network.scripts.generate_inchi -i $FRAGPATH/fragment/$FRAGNODEFILE -o $FRAGPATH/fragment/$INCHITAB -n
#

- name: Set nextflow command (Generate Isomol Inchi)
  set_fact:
    nextflow_cmd: >-
      nextflow
      -log {{ fragpath }}/standardise/nextflow.log
      run
      -c {{ reppath }}/nextflow/nextflow.config
      {{ reppath }}/nextflow/generateinchi.nf
      -w {{ nextpath }}
      -with-report {{ fragpath }}/isoinchi/generateinchi_report.html
      --input {{ fragpath }}/isoinchi/{{ isoinchifile }}
      --out_dir {{ fragpath }}/isoinchi
      --outputfile {{ isoinchitab }}
      --chunk_size {{ inchigenchunk|int }}

- name: Display nextflow command (Generate Isomol Inchi)
  debug:
    var: nextflow_cmd

- name: Display nextflow command timeout (Generate Isomol Inchi)
  debug:
    msg: nextflow_timeout_minutes={{ nextflow_timeout_minutes }} nextflow_poll_period_minutes={{ nextflow_poll_period_minutes }}

- name: Run nextflow (Generate Isomol Inchi) (async)
  command: "{{ nextflow_cmd }}"
  async: "{{ nextflow_timeout_minutes|int * 60 }}"
  poll: 0
  register: nextflow_async

- name: Wait for nextflow (Generate Isomol Inchi)
  async_status:
    jid: "{{ nextflow_async.ansible_job_id }}"
  register: nextflow_result
  until: nextflow_result.finished
  delay: "{{ nextflow_poll_period_minutes|int * 60 }}"
  retries: "{{ (nextflow_timeout_minutes|int / nextflow_poll_period_minutes|int)|int }}"

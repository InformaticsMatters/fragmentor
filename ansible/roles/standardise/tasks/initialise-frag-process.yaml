---

- debug:
    msg: "{{ reppath }}/run/vendor/{{ vendor }}"

- name: Check vendor path
  stat:
    path: "{{ reppath }}/run/vendor/{{ vendor }}"
  register: vendor_path_result

- name: Check run
  stat:
    path: "{{ reppath }}/run"
  register: run_result

- name: Assert expected directories
  assert:
    that:
    - vendor_path_result.stat.isdir is defined
    - vendor_path_result.stat.isdir
    - run_result.stat.isdir is defined
    - run_result.stat.isdir

# Optionally erase and then create the working directories...

- name: Erase directories
  file:
    path: "{{ item }}"
    state: absent
  loop:
  - "{{ datapath }}/data/{{ vendor }}"
  - "{{ fragpath }}/fragment"
  - "{{ standpath }}/standardise"
  when: clean_start|bool

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ datapath }}/data/{{ vendor }}"
  - "{{ fragpath }}/fragment"
  - "{{ standpath }}/standardise"

- name: Check fragpass
  stat:
    path: "{{ reppath }}/run/fragpass"
  register: fragpass_result

- name: Assert fragpass
  assert:
    that:
    - fragpass_result.stat.exists

- name: Set fragpass state
  file:
    path: "{{ reppath }}/run/fragpass"
    mode: "0600"

- name: Insert run parameters
  postgresql_query:
    query: >-
      insert into source (name, version, currency)
      values ('{{ vendor }}', '{{ version }}','');
    autocommit: yes

- name: Retrieve source_id
  postgresql_query:
    query: select max(id) from source where name = '{{ vendor }}';
    autocommit: no
  register: query_result

- debug:
    var: query_result

- name: Set source_id
  set_fact:
    source_id: "{{ query_result.query_result[0].max }}"

- name: Display source_id
  debug:
    var: source_id

---
# Gets 'raw' data from an AWS S3 path

- name: Assert S3 credentials
  assert:
    that:
    - s3_access_key|length > 0
    - s3_secret_key|length > 0
    fail_msg: You must provide S3 access and secret keys

- name: Assert S3 bucket
  assert:
    that:
    - s3_bucket|length > 0
    fail_msg: You must provide an S3 bucket

- name: Log line to report
  blockinfile:
    marker: "<!-- {standardise-get} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <h2>Step: Get Raw Data from S3</h2>
      <p>Begin: {{ now(utc=True).isoformat() }}</p>

- name: Set raw path
  set_fact:
    raw_path: raw/vendor/{{ vendor|regex_replace('_', '/') }}/{{ version }}

- name: Display raw path
  debug:
    msg: bucket={{ s3_bucket }} raw_path={{ raw_path }}

- name: Get raw data (AWS)
  block:

  - name: List raw data (AWS)
    aws_s3:
      bucket: "{{ s3_bucket }}"
      mode: list
      prefix: "{{ raw_path }}"
    register: raw_result

  - name: Get S3 keys (AWS)
    set_fact:
      s3_keys: "{{ raw_result.s3_keys }}"

  when: s3_url|length == 0

- name: Get raw data (non-AWS)
  block:

  - name: List raw data (non-AWS)
    aws_s3:
      bucket: "{{ s3_bucket }}"
      mode: list
      prefix: "{{ raw_path }}"
      region: "{{ s3_region }}"
      s3_url: "{{ s3_url }}"
    register: raw_result

  - name: Get S3 keys (non-AWS)
    set_fact:
      s3_keys: "{{ raw_result.s3_keys }}"

  when: s3_url|length > 0

- name: Display S3 keys
  debug:
    var: s3_keys

# There may be two keys in the result...
# The first key might be the directory the files are in,
# e.g.: "s3_keys": [
#           "raw/vendor/xchem/v1/",
#           "raw/vendor/xchem/v1/dsip.txt.gz"
#        ]
#
# So you need to take steps to avoid any non-files
# in the list (i.e. those that end '/'?)
#
# The behaviour seems to be dependent on whether the
# bucket was created using the AWS console or programmatically.
# See https://app.clubhouse.io/informaticsmatters/story/1760

- name: Check raw data
  assert:
    that:
    - s3_keys|length > 0

- name: Set destination path
  set_fact:
    destination: "{{ datapath }}/data/{{ vendor }}"

# Get the files, here we make sure the object does not end with a '/'
# as there's a danger (especially if the user has created the bucket manually)
# that the containing directory is also part of the list.

- name: Get raw data
  block:

  - name: Get raw data (AWS)
    aws_s3:
      bucket: "{{ s3_bucket }}"
      mode: get
      object: "{{ item }}"
      dest: "{{ destination }}/{{ item|basename }}"
    loop: "{{ s3_keys[1:] }}"
    when:
    - s3_url|length == 0
    - not item|regex_search('.*/$')

  - name: Get raw data (non-AWS)
    aws_s3:
      bucket: "{{ s3_bucket }}"
      mode: get
      object: "{{ item }}"
      dest: "{{ destination }}/{{ item|basename }}"
      region: "{{ s3_region }}"
      s3_url: "{{ s3_url }}"
    loop: "{{ s3_keys[1:] }}"
    when:
    - s3_url|length > 0
    - not item|regex_search('.*/$')

# Now hand over the get logic to vendor-specific
# un-packing code. It may need to do nothing but
# this is where we do vendor-specific presentation...

- include_tasks: unpack-raw-data-{{ unpacker }}.yaml

- name: Log line to report
  blockinfile:
    marker: "<!-- {standardise-get} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <p>End: {{ now(utc=True).isoformat() }}</p>

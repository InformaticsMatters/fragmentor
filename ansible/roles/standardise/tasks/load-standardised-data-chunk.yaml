---
# Load chunks to Database

- name: Creating Standardisation tables ({{ vendor }})
  postgresql_query:
    path_to_script: "{{ role_path }}/files/{{ vendor }}/f40_create_stand_database.sql"
    autocommit: yes

#- name: Copy chunk
#  postgresql_copy:
#    copy_from: "{{ item }}"
#    dst: "{{ standardise_copy_table }}"
#    columns: "{{ standardise_copy_columns }}"
#
# NOTE: For ismols, the smiles (and osmiles) can contain a \. So that these are correctly loaded into the i_mols tabe
#       the tab file must be uploaded with (FORMAT csv, DELIMITER E'\t'). Using CSV format means that the \ is not read
#       is an escape character os as a linefeed (as \n).

- name: Copy chunk ({{ item }})
  command: >-
    psql -X -U {{ database[deployment].login_user }} -h {{ database_login_host }} --echo-all
     --set AUTOCOMMIT=on --set ON_ERROR_STOP=on
     -c "\COPY {{ standardise_copy_table }}({{ standardise_copy_columns }})
         FROM '{{ item }}' (FORMAT csv, DELIMITER E'\t');"
    {{ database[deployment].db }}
  environment:
    PGPASSWORD: "{{ database[deployment].login_password }}"

- name: Load chunk ({{ vendor}})
  postgresql_query:
    path_to_script: "{{ role_path }}/files/{{ vendor }}/f40_load_standardised_data.sql"
    named_args:
      SOURCEID: "{{ source_id|int }}"
    autocommit: no
  register: query_result

- name: Display query result
  debug:
    var: query_result

- name: Move chunk to list of donechunks so ignored on a restart.
  shell: mv {{ item|basename }} done-{{ item|basename }}
  args:
    chdir: "{{ standpath }}/standardise"

- name: Log line to report
  blockinfile:
    marker: "<!-- {standardise-load} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <p>Chunk: {{ item }} </p>

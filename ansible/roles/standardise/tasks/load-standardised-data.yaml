---

# Splits the standard file into 'chunks'
# and then call on the 'chunk' loader
# for each file created to load into the database

- name: Log line to report
  blockinfile:
    marker: "<!-- {standardise-load} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <h2>Step: Load Standardised Data</h2>
      <p>Begin: {{ now(utc=True).isoformat() }}</p>

- name: Count molecules
  shell: wc -l < {{ standpath }}/standardise/standardised-compounds.tab
  register: standcount_result

- name: Set stand_count
  set_fact:
    stand_count: "{{ standcount_result.stdout|int - 1 }}"

- name: Log line to report
  blockinfile:
    marker: "<!-- {standardise-load} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <p><table>
      <tr><th>Parameter</th><th>Value</th></tr>
      <tr><td>Standardised Compounds to Load</td><td>{{ stand_count }}</td></tr>
      <tr><td>Standardisation Load Chunk Size</td><td>{{ standchunk }}</td></tr>
      </table></p>

# In this case the data upload is part way through ans an error has occurred. Upload should continue from from
# the as-yet unused files.
- name: Check if done files exists is already on standardise path
  stat:
    path: "{{ item }}"
    get_checksum: no
    get_md5: no
    get_mime: no
    get_attributes: no
  with_fileglob:
   - "{{ standpath }}/standardise/done-chunk_*"
  register: done_file
  changed_when: false

- debug:
    var: done_file

# Do not perform the chunking if a "done" file exists. This indicates that a partial rerun is being done where an
# error occurred uploading chunks.
- name: Extract standard header
  shell: head -1 standardised-compounds.tab > standardheader
  args:
    chdir: "{{ standpath }}/standardise"
  when:
  - done_file.results|length == 0

- name: Split standard file
  shell: >-
    tail -n +2 standardised-compounds.tab
    | split -d -l {{ standchunk }} - chunk_
  args:
    chdir: "{{ standpath }}/standardise"
  when:
  - done_file.results|length == 0

- name: Load chunk
  include_tasks: load-standardised-data-chunk.yaml
  with_fileglob:
  - "{{ standpath }}/standardise/chunk_*"

- name: Log line to report
  blockinfile:
    marker: "<!-- {standardise-load} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <p>End: {{ now(utc=True).isoformat() }}</p>

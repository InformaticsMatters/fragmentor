---

# This performs any finalisation steps required for the standardisation process:
# 1. Removes any working files no longer required (production only).
# 2. Copies any reports to save location in S3 identified by vendor/version/standardisation (production only)

- name: remove working files
  file:
    path: "{{ standpath }}/standardise/standardheader"
    state: absent

- name: Find working files
  find:
    paths: "{{ standpath }}/standardise"
    pattrns: 'done-chunk_*'
  register: wf_result

- name: Expect working files (in {{ standpath }}/standardise)
  assert:
    that:
    - wf_result.files|length > 0
    fail_msg: >-
      Expected to find working files (done-chunk_*).
      Did standardise do anything?

- name: Remove working files
  shell: rm done-chunk_*
  args:
    chdir: "{{ standpath }}/standardise"
    warn: no

# Finalise report
- name: Write line to report
  blockinfile:
    marker: "<!-- {standardise-init} ANSIBLE MANAGED BLOCK -->"
    path: "{{ standpath }}/standardise/standardise_report.html"
    block: |
      <p>Standardisation play ended on: {{ now(utc=True).isoformat() }}</p>
      <p>Saving Files to logs/{{ vendor }}/{{ version }}/standardise </p>

# Zip files for transfer
- name: Compress files
  shell: gzip *
  args:
    chdir: "{{ standpath }}/standardise"

- name: List files
  find:
    paths: "{{ standpath }}/standardise"
    patterns: '*.gz'
  register: find_result

- name: Extract files
  set_fact:
    files_found: "{{ find_result|json_query('files[*].path')|flatten }}"

- name: Display files
  debug:
    var: files_found

- name: Transfer files to S3
  block:

  - name: Set bucket object path
    set_fact:
      s3_object_path: "logs/{{ vendor }}/{{ version }}/standardise"

  - name: Display bucket object path
    debug:
      var: s3_object_path

  - name: Transfer to AWS
    aws_s3:
      bucket: "{{ s3_bucket }}"
      encrypt: "{{ s3_bucket_requires_encryption|bool }}"
      src: "{{ item }}"
      object: "{{ s3_object_path }}/{{ item|basename }}"
      mode: put
    loop: "{{ files_found }}"
    when: s3_url|length == 0

  - name: Transfer to non-AWS
    aws_s3:
      bucket: "{{ s3_bucket }}"
      encrypt: "{{ s3_bucket_requires_encryption|bool }}"
      src: "{{ item }}"
      object: "{{ s3_object_path }}/{{ item|basename }}"
      mode: put
      region: "{{ s3_region }}"
      s3_url: "{{ s3_url }}"
    loop: "{{ files_found }}"
    when: s3_url|length > 0

  when: deployment=="production"

# Copy log files to Repo
- name: Copy log files to repo
  shell: cp {{ standpath }}/standardise/* {{ logpath }}/log/{{ vendor }}/{{ version }}/standardise
  when: deployment=="development"

# Backup database if required using the site-backup play.
- include_role:
    name: backup
  when: add_backup|bool

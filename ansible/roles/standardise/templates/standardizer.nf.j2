/*
 * Standardize molecules Nextflow process:
 * Purpose: Standardise molecules across a cluster.
 *
 * Author | Date    | Version
 * Tim    | 03/2020 | Initial Version
 * Duncan | 03/2020 | Updated for multiple input files and no gzip.
 * Duncan | 12/2020 | Updated to change file splitter to python script.
 *
 */

params.inputs = 'run/data/chemspace_bb/chemspace_bb.txt'
params.chunk_size = 15000
params.out_dir = '.'
params.script = 'frag.standardise.scripts.chemspace_bb.standardise_chemspace_bb_pricing_compounds'
params.compound_id_prefix = 'SDF'
params.compound_id_field = 'mr_id'
params.split_token = 'None'

files = Channel
     .fromPath(params.inputs)

process split {

    container '{{ nextflow_container_registry }}/{{ nextflow_container_name }}:{{ nextflow_container_tag }}'
    errorStrategy = 'retry'
    maxErrors = 3

    input:
    file files

    output:
    file 'split_*' into split_files mode flatten

    """
    # Check if a token has been set, if so - supply the token to the python script.
    # python -m frag.std_utils.standardise_file_splitter data/sdf/v1/test.sdf.gz split_ 10 tmp --token {token}
    if [ ${params.split_token} != 'None' ]
    then
       python -m frag.std_utils.standardise_file_splitter $files split_ ${params.chunk_size} ./ --token ${params.split_token}
    else
       python -m frag.std_utils.standardise_file_splitter $files split_ ${params.chunk_size} ./ --header
    fi
    """

}

process standardise {

    container '{{ nextflow_container_registry }}/{{ nextflow_container_name }}:{{ nextflow_container_tag }}'
    errorStrategy = 'retry'
    maxErrors = 3

    input:
    file chunks from split_files

    output:
    file 'split_*.tab' into standardised

    """
    cp $chunks input.dat
    # Check if a compound_id_prefix has been set, if so - supply the prefix and id to the python script.
    if [ ${params.compound_id_prefix} != 'None' ]
    then
       python -m $params.script ./ input.dat ./output --prefix ${params.compound_id_prefix} --id-field ${params.compound_id_field}
    else
       python -m $params.script ./ input.dat ./output
    fi

    cp output/standardised-compounds.tab ./${chunks}_standardised.tab
    """

}

standardised.collectFile(name: "standardised-compounds.tab", storeDir: "${params.out_dir}", keepHeader: true)


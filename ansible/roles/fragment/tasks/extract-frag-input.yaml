---
# Extract unfragmented smiles.
# Note that this total also includes records in the database from previous runs that have no edges - i.e.
# Nonisomols with a child count of zero. These existing molecules will are filtered out later.
- name: Extract unfragmented smiles for this source_id to fragsmifile
  command: >-
    psql -X -U {{ database[deployment].login_user }} -h {{ database_login_host }} --echo-all
     --set AUTOCOMMIT=off --set ON_ERROR_STOP=on
     -c "\COPY (SELECT n.smiles FROM nonisomol n
         WHERE NOT EXISTS (SELECT 1 FROM edge e WHERE e.parent_id = n.id)
         AND EXISTS (SELECT 1 FROM mol_source m WHERE n.id = m.nonisomol_id
         AND m.source_id = {{ source_id }})
         AND n.hac <= {{ vendors[vendor].fraghac }} ) TO '{{ fragpath }}/fragment/{{ fragsmifile }}'"
    {{ database[deployment].db }}
  environment:
    PGPASSWORD: "{{ database[deployment].login_password }}"

- name: Calculate how many smiles to fragment
  command: >-
      wc -l {{ fragpath }}/fragment/{{ fragsmifile }}
  register: wc_result

- name: Set Mols to Fragment
  set_fact:
    mols_to_fragment: "{{ wc_result.stdout.split(' ')[0]|int }}"

- debug:
    var: mols_to_fragment

- name: Set frag_chunksize_calc
  set_fact:
    fragchunksize_calc: "{{ (0.5 * mols_to_fragment|int/hardware[deployment].parallel_jobs)|int }}"

# Check this is greater than the minimum
- name: Set frag_chunksize
  set_fact:
    fragchunksize: "{{ fragchunksize_calc|int }}"
  when: fragchunksize_calc|int>fragchunksize

- debug:
    var: fragchunksize

---

# This performs any finalisation steps required for the fragmentattion process:
# 1. Removes any working files no longer required (production only).
# 2. Copies any reports to save location in S3 identified by vendor/version/fragment (production only)
# 3. Files to be copied also include zipped rejected nodes.

- name: remove working files
  shell: rm -f {{ item }}
  args:
    chdir: "{{ fragpath }}/fragment"
    warn: no
  loop:
  - "edgechunk_*"
  - "nodechunk_*"
  - "edges.csv"
  - "nodes.csv"

# Finalise report
- name: Write line to report
  blockinfile:
    marker: "<!-- {fragment-init} ANSIBLE MANAGED BLOCK -->"
    path: "{{ fragpath }}/fragment/fragmentation_summary_report.html"
    block: |
      <p>Fragmentation play ended on: {{ now(utc=True).isoformat() }}</p>
      <p>Saving Files to logs/{{ vendor }}/{{ version }}/fragment </p>

# Zip files for transfer
- name: Compress files
  shell: gzip *
  args:
    chdir: "{{ fragpath }}/fragment"

- name: List files
  find:
    paths: "{{ fragpath }}/fragment"
    patterns: '*.gz'
  register: find_result

- name: Extract files
  set_fact:
    files_found: "{{ find_result|json_query('files[*].path')|flatten }}"

- name: Display files
  debug:
    var: files_found

- name: Transfer files to S3
  block:

  - name: Transfer files to AWS
    aws_s3:
      bucket: "{{ bucket }}"
      encrypt: "{{ bucket_requires_encryption|bool }}"
      src: "{{ item }}"
      object: logs/{{ vendor }}/{{ version }}/fragment/{{ item|basename }}
      mode: put
    loop: "{{ files_found }}"
    when: s3_url|length == 0

  - name: Transfer files to non-AWS
    aws_s3:
      bucket: "{{ bucket }}"
      encrypt: "{{ bucket_requires_encryption|bool }}"
      src: "{{ item }}"
      object: logs/{{ vendor }}/{{ version }}/fragment/{{ item|basename }}
      mode: put
      region: "{{ s3_region }}"
      s3_url: "{{ s3_url }}"
    loop: "{{ files_found }}"
    when: s3_url|length > 0

  when: deployment == "production"

# Copy log files to Repo
- name: Copy log files to repo
  shell: cp {{ fragpath }}/fragment/* {{ logpath }}/log/{{ vendor }}/{{ version }}/fragment
  when: deployment=="development"

# Backup database if required using the site-backup play.
- include_role:
    name: backup
  when: add_backup|bool

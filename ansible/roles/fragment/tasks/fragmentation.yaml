---

- name: Log line to report
  blockinfile:
    marker: "<!-- {fragmentation-nextflow} ANSIBLE MANAGED BLOCK -->"
    path: "{{ fragpath }}/fragment/fragmentation_summary_report.html"
    block: |
      <h2>Step: Fragmentation of New Molecules</h2>
      <p>Begin: {{ now(utc=True).isoformat() }}</p>


- name: Variable sanity-check
  assert:
    that:
    - "{{ vendors[vendor].fraghac|int }} > 0"
    - "{{ vendors[vendor].fragminhac|int }} >= 0"
    - "{{ vendors[vendor].fragmaxfrags|int }} > 0"


- name: Check inputfile present
  stat:
    path: "{{ fragpath }}/fragment/{{ fragsmifile }}"
  register: fragsmifile_result

- name: Assert fragsmifile
  assert:
    that:
    - fragsmifile_result.stat.exists

- debug:
    var: fragchunksize

- name: Variable sanity-check
  assert:
    that:
    - fragchunksize|int > 0

- name: Variable sanity-check
  assert:
    that:
    - mols_to_fragment|int > 0

# Set nextflow_timeout_minutes based on the expected time, proportion of total run being done and number of CPUS.
# If this is development or the value is lower than the default then the default is used.
- name: Set nextflow_timeout_calc
  set_fact:
    nextflow_timeout_calc: "{{ (safety_factor
                                * (vendors[vendor].est_total_fragmentation_time|int/hardware[deployment].parallel_jobs)
                                * (mols_to_fragment|int/vendors[vendor].approx_vendor_molecules))|int }}"
  when: deployment=="production"

- name: Set nextflow_timeout_minutes
  set_fact:
    nextflow_timeout_minutes: "{{ nextflow_timeout_calc|int }}"
  when: nextflow_timeout_calc|int>nextflow_timeout_minutes

- debug:
    var: nextflow_timeout_minutes

# Set nextflow_poll_period_minutes based on nextflow_timeout_minutes/30.
# If this is development then this defaults.
- name: Set nextflow_poll_period_minutes
  set_fact:
    nextflow_poll_period_minutes: "{{ (nextflow_timeout_minutes|int/60)|int }}"
  when: deployment=="production"

- debug:
    var: nextflow_poll_period_minutes

- name: Log line to report
  blockinfile:
    marker: "<!-- {fragmentation-nextflow} ANSIBLE MANAGED BLOCK -->"
    path: "{{ fragpath }}/fragment/fragmentation_summary_report.html"
    block: |
      <p><table>
      <tr><th>Parameter</th><th>Value</th></tr>
      <tr><td>Molecules to Fragment</td><td>{{ mols_to_fragment }}</td></tr>
      <tr><td>Fragmentation Chunk Size</td><td>{{ fragchunksize }}</td></tr>
      <tr><td>nextflow_timeout_minutes</td><td>{{ nextflow_timeout_minutes }}</td></tr>
      <tr><td>nextflow_poll_period_minutes</td><td>{{ nextflow_poll_period_minutes }}</td></tr>
      </table></p>

# Move the nextflow workflow and config into place (from templates)
# so they move from "<templates>/{{ deployment }}" to "{{ reppath }}/nextflow"...

- name: Translate nextflow files
  template:
    src: "{{ item }}"
    dest: "{{ reppath }}/nextflow/{{ item|regex_replace(deployment + '/')|regex_replace('.j2') }}"
  loop:
  - "fragmentation.nf.j2"
  - "{{ deployment }}/nextflow.config.j2"

- name: Set nextflow command
  set_fact:
    nextflow_cmd: >-
      nextflow run -c {{ reppath }}/nextflow/nextflow.config
       {{ reppath }}/nextflow/fragmentation.nf
       -w {{ nextpath }}
       -with-report {{ fragpath }}/fragment/fragmentation_nextflow_report.html
       --input {{ fragpath }}/fragment/{{ fragsmifile }}
       --out_dir {{ fragpath }}/fragment
       --chunk_size {{ fragchunksize|int }}
       --max_hac {{ vendors[vendor].fraghac }}
       --max_frag {{ vendors[vendor].fragmaxfrags }}

#time nextflow run -c $REPPATH/nextflow/nextflow.config $REPPATH/nextflow/fragmentation.nf -with-report $FRAGPATH/fragment/frag_report.html \
#    --input $FRAGDATA/fragment/$FRAGSMIFILE --out_dir $FRAGPATH/fragment --tmp_dir $FRAGPATH/fragment --chunk_size $FRAGCHUNKSIZE --max_hac $FRAGHAC --max_frag $FRAGMAXFRAGS $@

- name: Display nextflow command
  debug:
    var: nextflow_cmd

- name: Run nextflow (async)
  command: "{{ nextflow_cmd }}"
  async: "{{ nextflow_timeout_minutes|int * 60 }}"
  poll: 0
  register: nextflow_async

- name: Wait for nextflow (async)
  async_status:
    jid: "{{ nextflow_async.ansible_job_id }}"
  register: nextflow_result
  until: nextflow_result.finished
  delay: "{{ nextflow_poll_period_minutes|int * 60 }}"
  retries: "{{ (nextflow_timeout_minutes|int / nextflow_poll_period_minutes|int)|int }}"

- name: Log line to report
  blockinfile:
    marker: "<!-- {fragmentation-nextflow} ANSIBLE MANAGED BLOCK -->"
    path: "{{ fragpath }}/fragment/fragmentation_summary_report.html"
    block: |
      <p>End: {{ now(utc=True).isoformat() }}</p>

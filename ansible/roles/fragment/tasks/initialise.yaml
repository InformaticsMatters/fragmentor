---

# Check run path
- name: Ensure runpath is present
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ runpath }}"

# Install the required modules to be able to synchronise with S3 and use ansible python modules
- name: Install requirements
  pip:
    name:
    - python-dateutil==2.8.1
    - botocore==1.19.2
    - boto3==1.12.49
    - psycopg2-binary==2.8.5
  when: deployment=="production"

- name: Install requirements
  pip:
    name:
    - python-dateutil==2.8.1
    - botocore==1.19.2
    - boto3==1.12.49
    - psycopg2-binary==2.8.5
  when: deployment=="development"

- name: Retrieve source_id
  postgresql_query:
    query: select max(id) from source where name = '{{ vendor }}' and version = '{{ version }}';
    autocommit: no
  register: query_result

- debug:
    var: query_result

- name: Set source_id
  set_fact:
    source_id: "{{ query_result.query_result[0].max }}"

- name: Display source_id
  debug:
    var: source_id

# Optionally erase and then create the working directories...
- name: Erase directories
  file:
    path: "{{ item }}"
    state: absent
  loop:
  - "{{ fragpath }}/fragment"
  - "{{ logpath }}/{{ vendor }}/{{ version }}/fragment"
  when: clean_start|bool

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ fragpath }}/fragment"
  - "{{ logpath }}/log/{{ vendor }}/{{ version }}/fragment"


- name: Ensure sql, nextflow directories are present
  file:
    path: "{{ item }}"
    state: directory
  loop:
  - "{{ reppath }}/sql"
  - "{{ reppath }}/nextflow"

- name: Variable sanity-check
  assert:
    that:
    - "{{ vendors[vendor].fraghac|int }} > 0"
    - "{{ vendors[vendor].fragminhac|int }} >= 0"
    - "{{ vendors[vendor].fragmaxfrags|int }} > 0"
    - "{{ vendors[vendor].fraglimit|int }} >= 0"

# Create Standardisation Summary Report. This is saved with the playbook results.
- name: Create Standardise HTML log report
  blockinfile:
    path: "{{ fragpath }}/fragment/fragmentation_summary_report.html"
    create: yes
    marker: "<!-- {fragment-init} ANSIBLE MANAGED BLOCK -->"
    insertafter: "<body>"
    block: |
      <h1>Ansible Fragmentation Playbook</h1>
      <p><table>
      <tr><th>Parameter</th><th>Value</th></tr>
      <tr><td>Vendor</td><td>{{ vendor }}</td></tr>
      <tr><td>Version</td><td>{{ version }}</td></tr>
      <tr><td>Source-id</td><td>{{ source_id }}</td></tr>
      <tr><td>User</td><td>{{ inventory_hostname }}</td></tr>
      <tr><td>Deployment</td><td>{{ deployment }}</td></tr>
      <tr><td>Heavy Atom Count</td><td>{{ vendors[vendor].fraghac }}</td></tr>
      <tr><td>Minimum Heavy Atom Count</td><td>{{ vendors[vendor].fragminhac }}</td></tr>
      <tr><td>Maximum Fragmentation Passes</td><td>{{ vendors[vendor].fragmaxfrags }}</td></tr>
      <tr><td>Fragmentation Limit</td><td>{{ vendors[vendor].fraglimit }}</td></tr>
      <tr><td>Working Directory</td><td>{{ runpath }}</td></tr>
      </table></p>
      <p>Fragmentation play started on: {{ now(utc=True).isoformat() }}</p>
  when: clean_start|bool

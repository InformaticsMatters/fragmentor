---

# Check that a version has been defined.
# the most convenient way of doing this is via the command-line: -
#
#   ansible-playbook site-standardise \
#     -e vendor=dsip
#     -e version=123
#     -e deployment=production
#     -e runpath=data/share-2/run01
#

- name: Assert user-variable definitions
  assert:
    that:
    - deployment|string|length > 0
    - deployment|string != 'SetMe'
    - version|string|length > 0
    - version|string != 'SetMe'
    - vendor|string|length > 0
    - vendor|string != 'SetMe'
    - runpath|string|length > 0
    - runpath|string != 'SetMe'
    fail_msg: You must provide a 'deployment', 'vendor', 'version' and default run path where files will be stored.

- name: Assert sort memory
  assert:
    that:
    - nextflow_process_sort_memory_m|int >= 100

# The user is also expected to have defined the environment variables: -
#
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY

- name: Assert AWS credentials
  assert:
    that:
    - aws_access_key|string|length > 0
    - aws_secret_key|string|length > 0
    fail_msg: You must define 'AWS_ACCESS_KEY_ID' and 'AWS_SECRET_ACCESS_KEY'
  when: deployment=="production"

- block:

  - import_tasks: initialise.yaml
  - import_tasks: extract-frag-input.yaml
  - import_tasks: fragmentation.yaml
  - import_tasks: load-nodes.yaml
  - import_tasks: load-edges.yaml
  - import_tasks: finalise.yaml

  module_defaults:
    postgresql_query:
      login_host: "{{ database_login_host }}"
      port: "{{ database[deployment].port }}"
      db: "{{ database[deployment].db }}"
      login_user: "{{ database[deployment].login_user }}"
      login_password: "{{ database[deployment].login_password }}"
    postgresql_copy:
      login_host: "{{ database_login_host }}"
      port: "{{ database[deployment].port }}"
      db: "{{ database[deployment].db }}"
      login_user: "{{ database[deployment].login_user }}"
      login_password: "{{ database[deployment].login_password }}"

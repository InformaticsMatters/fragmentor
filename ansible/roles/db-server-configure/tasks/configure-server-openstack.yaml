---

# NOTE:   This code does not (as yet) create the server.
#         Instead it expects production and development servers
#         at the designated locations in the database map
#         (see group_vars/all.yaml)

# In order to create the server we need to: -
#
# 1. Create the database service account
# 2. Create mount paths and format and mount the volumes
#
# Our expectation here is that docker is installed on the server -
# a responsibility of the docker role we should have already applied.

- name: Check deployment definition
  assert:
    that: deployment|string != 'SetMe'

# Get the list of exiting mounts, present in the built-in 'ansible_mounts'
# variable, which looks little like this...
#
# "ansible_mounts": [
#        {
#            "block_available": 0,
#            "block_size": 2048,
#            "block_total": 236,
#            "block_used": 236,
#            "device": "/dev/sr0",
#            "fstype": "iso9660",
#            "inode_available": 0,
#            "inode_total": 0,
#            "inode_used": 0,
#            "mount": "/mnt/context",
#            "options": "ro,relatime",
#            "size_available": 0,
#            "size_total": 483328,
#            "uuid": "2020-04-20-10-00-40-00"
#        }
#      ]
- name: Get list of devices mounted
  set_fact:
    mounted_devices: "{{ ansible_mounts|json_query('[*].device')|flatten }}"

- name: Display mounts
  debug:
    var: mounted_devices

- name: Create DB volume mount paths
  file:
    path: "{{ item.value.mount_path }}"
    state: directory
    mode: '0777'
    owner: "{{ user_account }}"
    group: "{{ user_account }}"
    recurse: yes
  loop: "{{ lookup('dict', db_devices) }}"

- name: Create DB volume ext4 filesystem
  filesystem:
    fstype: ext4
    dev: "{{ item.value.device }}"
  loop: "{{ lookup('dict', db_devices) }}"
  when: item.value.device not in mounted_devices

# Now create a dictionary of device names (/dev/vda)
# against device UUID (c55fbb69-46b5-432e-a222-59ef5531923f)
# so that we can use the UUID when mounting.
#
# We have to filter the devices in an attempt to ignore those
# that don't look like /dev/vd?. Those that don't don't have a UUID
# like /dev/sr0.

- name: Display ansible_devices
  debug:
    var: ansible_devices

- name: Get device names
  set_fact:
    device_names: "{{ ansible_devices.keys() }}"

- name: Filter device names
  set_fact:
    device_names: "{{ device_names|select('match', 'vd.*')|list }}"

- name: Get device UUIDs
  set_fact:
    device_uuids: "{{ ansible_devices|json_query('*.links.uuids')|flatten }}"

- name: Create device UUID dictionary
  set_fact:
    device_uuids_dict: "{{ device_uuids_dict|default({})|combine({'/dev/' + item.0: item.1}) }}"
  with_together:
  - "{{ device_names }}"
  - "{{ device_uuids }}"

- name: Display device UUID dictionary
  debug:
    var: device_uuids_dict

- name: Mount DB volumes
  mount:
    path: "{{ item.value.mount_path }}"
    src: UUID={{ device_uuids_dict[item.value.device] }}
    fstype: ext4
    state: mounted
  loop: "{{ lookup('dict', db_devices) }}"
  when: item.value.device not in mounted_devices

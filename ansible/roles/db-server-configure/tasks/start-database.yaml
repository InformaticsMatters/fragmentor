---

- name: Check deployment definition
  assert:
    that: deployment|string != 'SetMe'

- name: Ensure required Python modules
  pip:
    name: "{{ item }}"
  loop:
  - docker
  - docker-py
  become: yes
  become_user: "{{ database[deployment].db_user_account }}"

- name: Adding "{{ database[deployment].db_user_account }}" to docker group
  user:
    name: "{{ database[deployment].db_user_account }}"
    groups: docker
    append: yes
  become: yes
  become_user: "{{ database[deployment].db_user_account }}"

- name: Start database container
  docker_container:
    name: db
    image: "{{ db_container_image }}:{{ db_container_tag }}"
    command: >-
      -c 'shared_buffers={{ db_shared_buffers_g }}GB'
      -c 'work_mem={{ db_work_mem_m }}MB'
      -c 'autovacuum_max_workers={{ db_max_parallel_workers }}'
      -c 'max_worker_processes={{ db_max_parallel_workers }}'
      -c 'max_parallel_workers={{ db_max_parallel_workers }}'
      -c 'max_parallel_workers_per_gather={{ (db_max_parallel_workers|int / 2)|int }}'
      -c 'synchronous_commit=off'
      -c 'logging_collector=true'
      -c 'log_min_messages=notice'
      -c 'max_wal_size={{ db_max_wal_size_g }}GB'
    shm_size: "{{ db_shared_buffers_g|int * 2 }}G"
    state: started
    restart_policy: on-failure
    restart_retries: 5
    env:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: "{{ database[deployment].login_user }}"
      POSTGRES_PASSWORD: "{{ database[deployment].login_password }}"
      POSTGRES_DB: "{{ database[deployment].db }}"
      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/wal/wal
    volumes:
    - "{{ db_devices['pg_data'].mount_path }}:/var/lib/postgresql/data"
    - "{{ db_devices['pg_wal'].mount_path }}:/var/lib/postgresql/wal"
    - "{{ database[deployment].copy_directory }}:{{ database[deployment].copy_directory }}"
    exposed_ports:
    - "{{ database[deployment].port }}:5432"
    network_mode: host
  become: yes
  become_user: "{{ database[deployment].db_user_account }}"

- name: Wait for database port
  wait_for:
    port: "{{ database[deployment].port }}"

---

# In order to create the server we need to: -
#
# 1. Check running container
#
# Then, if the container is not running...
#
# 2. format and mount the backup volume
# 3. Create the database service account
# 4. format and mount the DB and WAL volumes
# 5. run the container image (always) and wait for its port
#
# Our expectation here is that docker is installed on the server -
# a responsibility of the docker role we should have already applied.

- name: Create database user account
  user:
    name: "{{ db_user_account }}"
    groups: docker
    append: yes

# 1.

- name: Check DB container
  docker_container_info:
    name: db
  register: db_result

- name: Display DB container state
  debug:
    var: db_result

# Get the list of exiting mounts, present in the built-in 'ansible_mounts'
# variable, which looks little like this...
#
# "ansible_mounts": [
#        {
#            "block_available": 0,
#            "block_size": 2048,
#            "block_total": 236,
#            "block_used": 236,
#            "device": "/dev/sr0",
#            "fstype": "iso9660",
#            "inode_available": 0,
#            "inode_total": 0,
#            "inode_used": 0,
#            "mount": "/mnt/context",
#            "options": "ro,relatime",
#            "size_available": 0,
#            "size_total": 483328,
#            "uuid": "2020-04-20-10-00-40-00"
#        }
#      ]
- name: Get list of devices mounted
  set_fact:
    mounted_devices: "{{ ansible_mounts|json_query('[*].device')|flatten }}"

- name: Display mounts
  debug:
    var: mounted_devices

# 2.

- name: Ensure DB backup volume mount path
  file:
    path: "{{ item }}"
    state: directory
    mode: '0777'
    owner: "{{ db_user_account }}"
    group: "{{ db_user_account }}"
    recurse: yes
  loop:
  - /pgdata-backup

- name: Create DB backup volume ext4 filesystem
  filesystem:
    fstype: ext4
    dev: "{{ item }}"
  loop:
  - "{{ db_backup_volume }}"
  when: db_backup_volume not in mounted_devices

- name: Mount DB backup volume
  mount:
    path: /pgdata-backup
    src: "{{ db_backup_volume }}"
    fstype: ext4
    state: mounted
  when: db_backup_volume not in mounted_devices

- block:

  # If the database is not running...

  # 3.

  - name: Get database user's home directory
    shell: >-
      getent passwd "{{ db_user_account }}" | awk -F: '{ print $6 }'
    changed_when: false
    register: user_home

  - name: Crete database user tmp (for Ansible)
    file:
      path: "{{ user_home.stdout }}/.ansible/tmp"
      mode: '0700'
      owner: "{{ db_user_account }}"
    become_user: "{{ db_user_account }}"

  # 4.

  - name: Ensure mount paths
    file:
      path: "{{ item }}"
      state: directory
      mode: '0777'
      owner: "{{ db_user_account }}"
      group: "{{ db_user_account }}"
      recurse: yes
    loop:
    - /pgdata
    - /pgcopy

#  - name: Create DB data volume ext4 filesystem
#    filesystem:
#      fstype: ext4
#      dev: "{{ db_db_volume }}"
#    when: db_db_volume not in mounted_devices

  - name: Mount DB data volume
    mount:
      path: /pgdata
      src: "{{ db_db_volume }}"
      fstype: ext4
      state: mounted
    when: db_db_volume not in mounted_devices

#  - name: Create DB pgcopy volume ext4 filesystem
#    filesystem:
#      fstype: ext4
#      dev: "{{ db_db_pgcopy_volume }}"
#    when: db_db_pgcopy_volume not in mounted_devices

  - name: Mount DB pgcopy volume
    mount:
      path: /pgcopy
      src: "{{ db_db_pgcopy_volume }}"
      fstype: ext4
      state: mounted
    when: db_db_pgcopy_volume not in mounted_devices

  when:
  - db_result.container.State is not defined

# 5.

#- name: Start database container (always)
#  docker_container:
#    name: db
#    image: "{{ db_container_image }}:{{ db_container_tag }}"
#    command: >-
#      -c 'shared_buffers={{ db_shared_buffers_g }}GB'
#      -c 'work_mem={{ db_work_mem_m }}MB'
#      -c 'autovacuum_max_workers=24'
#      -c 'max_worker_processes=24'
#      -c 'max_parallel_workers=24'
#      -c 'max_parallel_workers_per_gather=8'
#    shm_size: "{{ db_shared_buffers_g|int * 2 }}G"
#    state: started
#    env:
#      PGDATA: /var/lib/postgresql/data/pgdata
#      POSTGRES_USER: "{{ database[deployment].login_user }}"
#      POSTGRES_PASSWORD: "{{ database[deployment].login_password }}"
#      POSTGRES_DB: "{{ database[deployment].db }}"
#      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/wal
#    volumes:
#    - /pgdata:/var/lib/postgresql/data
#    - /pgwal:/var/lib/postgresql/wal
#    - /pgcopy:/pgcopy
#    exposed_ports:
#    - "{{ database[deployment].port }}:5432"
#    network_mode: host
#  become_user: "{{ db_user_account }}"
#
#- name: Wait for database port
#  wait_for:
#    port: "{{ database[deployment].port }}"

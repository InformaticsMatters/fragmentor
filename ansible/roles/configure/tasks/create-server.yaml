---

# In order to create the server we need to: -
#
# 1. Create the database service account
# 2. Create mount paths and format and mount the volumes
#
# Our expectation here is that docker is installed on the server -
# a responsibility of the docker role we should have already applied.

- name: Create database user account
  user:
    name: "{{ db_user_account }}"
    groups: docker
    append: yes

# Get the list of exiting mounts, present in the built-in 'ansible_mounts'
# variable, which looks little like this...
#
# "ansible_mounts": [
#        {
#            "block_available": 0,
#            "block_size": 2048,
#            "block_total": 236,
#            "block_used": 236,
#            "device": "/dev/sr0",
#            "fstype": "iso9660",
#            "inode_available": 0,
#            "inode_total": 0,
#            "inode_used": 0,
#            "mount": "/mnt/context",
#            "options": "ro,relatime",
#            "size_available": 0,
#            "size_total": 483328,
#            "uuid": "2020-04-20-10-00-40-00"
#        }
#      ]
- name: Get list of devices mounted
  set_fact:
    mounted_devices: "{{ ansible_mounts|json_query('[*].device')|flatten }}"

- name: Display mounts
  debug:
    var: mounted_devices

- name: Create DB volume mount paths
  file:
    path: "{{ item.value.mount_path }}"
    state: directory
    mode: '0777'
    owner: "{{ db_user_account }}"
    group: "{{ db_user_account }}"
    recurse: yes
  loop: "{{ lookup('dict', db_devices }}"

- name: Create DB volume ext4 filesystem
  filesystem:
    fstype: ext4
    dev: "{{ item.value.device }}"
  loop: "{{ lookup('dict', db_devices }}"
  when: item.value.device not in mounted_devices

- name: Mount DB volumes
  mount:
    path: "{{ item.value.mount_point }}"
    src: "{{ item.value.device }}"
    fstype: ext4
    state: mounted
  loop: "{{ lookup('dict', db_devices }}"
  when: item.value.device not in mounted_devices

- name: Get database user's home directory
  shell: >-
    getent passwd "{{ db_user_account }}" | awk -F: '{ print $6 }'
  changed_when: false
  register: user_home

- name: Crete database user tmp (for Ansible)
  file:
    path: "{{ user_home.stdout }}/.ansible/tmp"
    mode: '0700'
    owner: "{{ db_user_account }}"
  become: true
  become_user: "{{ db_user_account }}"

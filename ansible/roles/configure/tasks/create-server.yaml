---

# In order to create the server we need to: -
#
# 1. Check running container
#
# Then, if the container is not running...
#
# 2. Create the database service account
# 3. format and mount the DB and WAL volumes
# 4. run the container image (always) and wait for its port
#
# Our expectation here is that docker is installed on the server -
# a responsibility of the docker role we should have already applied.

# 1.

- name: Check DB container
  docker_container_info:
    name: db
  register: db_result

- block:

  # If the database is not running...

  # 2.

  - name: Create database user account
    user:
      name: "{{ db_user_account }}"
      groups: docker
      append: yes

  - name: Get database user's home directory
    shell: >-
      getent passwd "{{ db_user_account }}" | awk -F: '{ print $6 }'
    changed_when: false
    register: user_home

  - name: Crete database user tmp (for Ansible)
    file:
      path: "{{ user_home.stdout }}/.ansible/tmp"
      mode: '0700'
      owner: "{{ db_user_account }}"
    become_user: "{{ db_user_account }}"

  # 3.

  - name: Unmount DB volume
    mount:
      path: /pgdata
      src: "{{ db_db_volume }}"
      state: absent

  - name: Unmount WAL volume
    mount:
      path: /pgwal
      src: "{{ db_wal_volume }}"
      state: absent

  - name: Ensure mount paths
    file:
      path: "{{ item }}"
      state: directory
      mode: '0777'
      owner: "{{ db_user_account }}"
      group: "{{ db_user_account }}"
      recurse: yes
    loop:
    - /pgdata
    - /pgwal

  - name: Create ext4 filesystem
    filesystem:
      fstype: ext4
      dev: "{{ item }}"
    loop:
    - /dev/vdb
    - /dev/vdc

  - name: Mount DB volume
    mount:
      path: /pgdata
      src: "{{ db_db_volume }}"
      fstype: ext4
      state: present

  - name: Mount WAL volume
    mount:
      path: /pgwal
      src: "{{ db_wal_volume }}"
      fstype: ext4
      state: present

  when:
  - db_result.container is defined
  - db_result.container.State is defined
  - db_result.container.State.Running is defined
  - not db_result.container.State.Running

# 4.

- name: Start database container (always)
  docker_container:
    name: db
    image: "{{ db_container_image }}:{{ db_container_tag }}"
    command: >-
      -c 'shared_buffers=4GB'
      -c 'work_mem=128MB'
      -c 'autovacuum_max_workers=6'
    shm_size: 5G
    state: started
    env:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: "{{ database[deployment].login_user }}"
      POSTGRES_PASSWORD: "{{ database[deployment].login_password }}"
      POSTGRES_DB: "{{ database[deployment].db }}"
      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/wal
    volumes:
    - /pgdata:/var/lib/postgresql/data
    - /pgwal:/var/lib/postgresql/wal
    exposed_ports:
    - "{{ database[deployment].port }}:5432"
    network_mode: host
  become_user: "{{ db_user_account }}"

- name: Wait for database port
  wait_for:
    port: "{{ database[deployment].port }}"

/*
 * Extract Neo4j Node Data SQL Statements:
 * Purpose: Extract Neo4j node data into CSV file on database server
 */

--
-- Nodes.csv
-- smiles:ID(F2),hac:INT,chac:INT,osmiles,inchik,inchis,cmpd_ids:STRING[],:LABEL
-- Note that this can be for multiple sources.
--

-- Take this and add orignal molecules that were not in the edge_index (these were fragmented but with no children).
COPY (select np.smiles, np.hac, np.rac, np.ring_smiles, np.inchik, np.inchis, string_agg (distinct(ms.code), ';'),
        (case when string_agg (ms.code, ';') is null then 'F2'
              else 'F2;CanSmi;Mol;' || string_agg (distinct(v.supplier_node_label), ';')
         end) as label
       from o_node_view np
       left join mol_source ms on np.nonisomol_id = ms.nonisomol_id and ms.source_id in ({{ SOURCEIDS }})
       left join source s on s.id = ms.source_id
       left join vendor_name v on s.name = v.vendor_name
       group by 1,2,3,4,5,6
      union
     select n0.smiles, n0.hac, n0.rac, n0.ring_smiles, n0.inchik, n0.inchis, string_agg (distinct(ms.code), ';'),
            'F2;CanSmi;Mol;' || string_agg (distinct(v.supplier_node_label), ';')
       from mol_source ms
       join nonisomol n0 on ms.nonisomol_id = n0.id and n0.child_count = 0
       left join source s on s.id = ms.source_id
       left join vendor_name v on s.name = v.vendor_name
      where ms.source_id in ({{ SOURCEIDS }})
       group by 1,2,3,4,5,6)
   TO '{{ NEONODEFILE }}' DELIMITER ',' CSV;

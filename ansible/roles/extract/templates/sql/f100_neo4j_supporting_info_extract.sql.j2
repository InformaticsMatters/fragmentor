/*
 * Extract Neo4j Supporting information for source id:
 * Purpose:
 *     Fills the following files with the relevant information from the database
 *     supnodefile: supplier-nodes.csv
 *     supmolnodefile: suppliermol-nodes.csv
 *     molsupmoledgefile: molecule-suppliermol-edges.csv
 *     isosupmoledgefile: isomol-suppliermol-edges.csv
 *     isomoledgefile: isomol-molecule-edges.csv
 *     isomolnodefile: isomol-nodes.csv
 *
 */

--
-- Supplier Nodes.csv
-- name:ID(S),graph_version,processing_version,process_id,build_number:int,limit:int,min_hac:int,max_hac:int,build_datetime:datetime,label,:LABEL
--
COPY (select v.supplier_node_name, '{{ GRAPHVERSION }}',s.fragmentor_commit_ref,s.name || '/' || s.version, 1,
             s.frag_limit, s.min_hac, s.max_hac,
             trim(both '"' from to_json(s.start_datetime)::text),
             v.supplier_node_label, 'Supplier'
        from source s
        join vendor_name v on s.name = v.vendor_name
       where s.id in ({{ SOURCEIDS }}))
          to '{{ SUPNODEFILE }}' DELIMITER ',' CSV;

--
-- suppliermol-nodes.csv
-- cmpd_id:ID(SM),osmiles,:LABEL
--
COPY (select ms.code, ms.smiles, 'Available'
        from mol_source ms
        join nonisomol non on ms.nonisomol_id = non.id and non.child_count notnull
       where ms.source_id in ({{ SOURCEIDS }}))
          to '{{ SUPMOLNODEFILE }}' DELIMITER ',' CSV;

--
-- molecule-suppliermol-edges.csv
-- :START_ID(F2),:END_ID(SM),:TYPE
--
COPY (select non.smiles, ms.code, 'HasVendor'
        from mol_source ms
        join nonisomol non on ms.nonisomol_id = non.id and non.child_count notnull
       where ms.isomol_id is null
         and ms.source_id in ({{ SOURCEIDS }}))
          to '{{ MOLSUPMOLEDGEFILE }}' DELIMITER ',' CSV;

--
-- isomol-suppliermol-edges.csv
-- :START_ID(ISOMOL),:END_ID(SM),:TYPE
--
COPY (select replace(iso.smiles, chr(10), chr(92) || chr(110)), ms.code, 'HasVendor'
        from mol_source ms
        join isomol iso on ms.isomol_id = iso.id
        join nonisomol non on non.id = iso.nonisomol_id and non.child_count notnull
         and ms.source_id in ({{ SOURCEIDS }}))
          to '{{ ISOSUPMOLEDGEFILE }}' DELIMITER ',' CSV;

--
-- isomol-molecule-edges.csv
-- :START_ID(ISOMOL),:END_ID(F2),:TYPE
--
COPY (select replace(iso.smiles, chr(10), chr(92) || chr(110)), non.smiles, 'NonIso'
        from mol_source ms
        join isomol iso on iso.id = ms.isomol_id
        join nonisomol non on non.id = iso.nonisomol_id and non.child_count notnull
         and ms.source_id in ({{ SOURCEIDS }}))
          to '{{ ISOMOLEDGEFILE }}' DELIMITER ',' CSV;

--
-- isomolnodefile: isomol-nodes.csv
-- smiles:ID(ISOMOL),cmpd_ids:STRING[],:LABEL
--
COPY (select replace(iso.smiles, chr(10), chr(92) || chr(110)), iso.inchik, iso.inchis,
        string_agg (distinct(ms.code), ';'), 'CanSmi;Mol;' || string_agg (distinct(supplier_node_name), ';')
        from mol_source ms
        join source s on s.id = ms.source_id
        join vendor_name v on s.name = v.vendor_name
        join isomol iso on iso.id = ms.isomol_id
        join nonisomol non on non.id = iso.nonisomol_id and non.child_count notnull
         and ms.source_id in ({{ SOURCEIDS }})
        group by 1,2,3)
          to '{{ ISOMOLNODEFILE }}' DELIMITER ',' CSV;

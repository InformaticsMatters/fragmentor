---

- name: Check fragment path
  stat:
    path: "{{ copy_root }}/neo4jextract"
  register: fragment_path_result

- name: Extract NEO4J node information for this source_id to neonodefile
  command: >-
    psql -X -U {{ database[deployment].login_user }} -h {{ database[deployment].login_host }} --echo-all
     --set AUTOCOMMIT=off --set ON_ERROR_STOP=on
     -c "\COPY (WITH RECURSIVE fragments AS (
                select parent_id, child_id, parent_smiles, child_smiles, hac, rac, ring_smiles, child_hac, child_rac, child_ring_smiles, child_child_count
                  from v_edge_node e
                 inner join mol_source ms on e.parent_id = ms.nonisomol_id and ms.source_id = {{ source_id }}
                union
                 select c.parent_id, c.child_id, c.parent_smiles, c.child_smiles, c.hac, c.rac, c.ring_smiles, c.child_hac, c.child_rac, c.child_ring_smiles,c.child_child_count
                   from v_edge_node c
                  inner join fragments p on c.parent_id = p.child_id
                ) select f1.parent_smiles, f1.hac, f1.rac, f1.ring_smiles, NULL,'F2' as label
                 from fragments f1
                union
                  select f2.child_smiles, f2.child_hac, f2.child_rac, f2.child_ring_smiles, NULL, 'F2'
                 from fragments f2
                where  f2.child_child_count = 0)
                 TO '{{ neo4jpath }}/neo4jextract/{{ neonodefile }}' DELIMITER ',' CSV"
    {{ database[deployment].db }}
  environment:
    PGPASSWORD: "{{ database[deployment].login_password }}"

- name: Extract NEO4J edge information for this source_id to neoedgefile
  command: >-
    psql -X -U {{ database[deployment].login_user }} -h {{ database[deployment].login_host }} --echo-all
     --set AUTOCOMMIT=off --set ON_ERROR_STOP=on
     -c "\COPY (with RECURSIVE fragments AS (
             select parent_smiles, child_smiles, label, 'FRAG', parent_id, child_id
               from v_edge e
              inner join mol_source ms on e.parent_id = ms.nonisomol_id and ms.source_id = {{ source_id }}
             union
               select c.parent_smiles, c.child_smiles, c.label, 'FRAG', c.parent_id, c.child_id
                from v_edge c
               inner join fragments p on c.parent_id = p.child_id
            ) select parent_smiles, child_smiles, label, 'FRAG' from fragments)
            TO '{{ neo4jpath }}/neo4jextract/{{ neoedgefile }}' DELIMITER ',' CSV"
    {{ database[deployment].db }}
  environment:
    PGPASSWORD: "{{ database[deployment].login_password }}"

---
# Extract initialisation scripts

# For each source id given in the parameters file, do some sanity checks
- name: Check and store source_id for each vendor
  include_tasks: check_source_id.yaml
  loop: "{{ extracts }}"

- name: Display source_id list
  debug:
    var: source_id

# Create a comma separated string of source_ids for use in combination sql statements.
# For example (4,5)
- name: Create a comma separated list of source_ids
  set_fact:
     source_ids:  "{{ source_id | join(',') }}"

- name: Show list of source_ids
  debug:
      msg: "{{ source_ids }}"

# Create a comma separated string of source tables for use in combination sql statements.
# Note that for this string the quotes below have single quote on the outside and double quotes inside.
# This is so that a string in a format understandable by a postgres where clause is created.
# For example ('o_edge_molport',o_edge_xchem_dsip)
- name: Create a comma separated list of source_tables
  set_fact:
     source_tables:  '{{ "''"+source_table | join("'',''")  + "''"}}'

- name: show list of source_tables
  debug:
      msg: "{{ source_tables }}"

# Erase and create the neo4j extract directory.
- name: Remove extract path
  file:
    path: "{{ copy_root }}/extract"
    state: absent
    owner: "{{ database[deployment].db_user_account }}"
    group: "{{ database[deployment].db_user_account }}"
  delegate_to: "{{ groups['dbservers'][0] }}"
  become: yes
  when: deployment=="production"

- name: Ensure extract path
  file:
    path: "{{ copy_root }}/extract"
    state: directory
    mode: 0777
    owner: "{{ database[deployment].db_user_account }}"
    group: "{{ database[deployment].db_user_account }}"
  delegate_to: "{{ groups['dbservers'][0] }}"
  become: yes
  when: deployment=="production"

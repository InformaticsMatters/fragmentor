---
# For each source_id where flag "regenerate_index" is true, rebuild the index.
# Note that this allows combination builds without having to rebuild indexes for all the vendors involved.

- name: Display vendor
  debug:
    msg: "{{ item.lib.vendor }}"

- name: Display version
  debug:
    msg: "{{ item.lib.version }}"

- name: Display regenerate flag
  debug:
    msg: "{{ item.lib.regenerate_index }}"

- name: Display source_id
  debug:
    msg: "{{ source_id_lst[vendor_index] }}"

# Create a child table for this vendor that inherits from o_edge_parent table.
# The subsequent extracts can then use o_edge_parent as a basis for selecting data from multiple child tables.
- name: (Re) create o_edge_<vendor> table
  postgresql_query:
    query: >-
      drop table if exists public.o_edge_{{ item.lib.vendor }};
      create TABLE public.o_edge_{{ item.lib.vendor }} (PRIMARY KEY (parent_id, child_id, label)) inherits (o_edge_parent);
    autocommit: yes
  when: item.lib.regenerate_index|bool

- name: Retrieve number of molecules to extract
  postgresql_query:
    query: select count(*) from mol_source where source_id = {{ source_id_lst[vendor_index] }};
    autocommit: no
  register: query_result
  when: item.lib.regenerate_index|bool

- name: Variable sanity-check
  assert:
    that:
    - "{{ query_result.query_result[0].count|int > 0 }}"
  when: item.lib.regenerate_index|bool

- name: Set no_of_molecules
  set_fact:
    no_of_molecules: "{{ query_result.query_result[0].count  }}"
  when: item.lib.regenerate_index|bool

# This calls a stored procedure that is stored in p10_create_frag_database
- name: Load o_edge_vendor table
  postgresql_query:
    query: >-
      call extract_o_edge_vendor({{ source_id_lst[vendor_index] }}, {{ vendors[item.lib.vendor].extractchunksize }}, 0,
      {{ no_of_molecules }}, 'o_edge_{{ item.lib.vendor }}' );
    autocommit: yes
  when: item.lib.regenerate_index|bool

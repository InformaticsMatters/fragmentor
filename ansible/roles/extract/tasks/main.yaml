---

# Check that required command line parameters have been set:
# - deployment
# - Parameter file file containing vendor(s) and version(s) has been created.
#
#  e.g.
#   extracts:
#       - lib:
#           vendor: 'enamine_ro5'
#           version: 'jun2018'
#           regenerate_index: 'no'
#       - lib:
#           vendor: 'molport'
#           version: '2020-02'
#           regenerate_index: 'yes'
#
#  The first time a library version is extracted, regenerate_index should be set to 'yes'
#  so that the index of edges for the latest library version can be regenerated.
#  For subsequent runs (e.g. to extract combinations) it can be set to 'no' for speed.
#
#   ansible-playbook site-extract \
#     -e @parameters \
#     -e deployment=development|production
#
#  Also be aware of the save_extract flag that indicated whether files should be zipped and uploaded to S3.
#  For deployment=development this would normally be set to "N".

- name: Assert user-variable definitions
  assert:
    that:
    - deployment|string|length > 0
    - deployment|string != 'SetMe'
    - "{{ extracts[0].lib.vendor|string != 'SetMe'}}"
    fail_msg: You must provide a 'deployment', and a list of vendors in a parameter file to extract.

- name: List input vendors
  debug:
    msg: "{{ item.lib }}"
  loop: "{{ extracts }}"

# We need AWS credentials

- name: Check credentials
  assert:
    that:
    - aws_access_key|string|length > 0
    - aws_secret_key|string|length > 0
    fail_msg: You must provide AWS credentias so that I can save the data
  when: data_source[deployment] == 's3'

- block:

  - import_tasks: initialise.yaml
  - include_tasks: build-index-{{ index_build }}.yaml
    loop: "{{ extracts }}"
    loop_control:
      index_var: vendor_index

  - import_tasks: neo4j-extract-index.yaml
  - import_tasks: neo4j-extract.yaml

  module_defaults:
    postgresql_query:
      login_host: "{{ database_login_host }}"
      port: "{{ database[deployment].port }}"
      db: "{{ database[deployment].db }}"
      login_user: "{{ database[deployment].login_user }}"
      login_password: "{{ database[deployment].login_password }}"
    postgresql_copy:
      login_host: "{{ database_login_host }}"
      port: "{{ database[deployment].port }}"
      db: "{{ database[deployment].db }}"
      login_user: "{{ database[deployment].login_user }}"
      login_password: "{{ database[deployment].login_password }}"

# Final destination depends on whether database is prod/dev.
- import_tasks: neo4j-production.yaml
  delegate_to: "{{ database_login_host }}"
  become: yes
  when: deployment=="production"
